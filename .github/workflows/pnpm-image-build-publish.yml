on:
  workflow_call:
    inputs:
      build-script:
        required: true
        type: string
        default: 'build:prod'
      lint-script:
        required: true
        type: string
        default: 'lint'
      node-version:
        required: true
        type: string

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
      - 
        uses: actions/checkout@v3
        with:
          submodules: recursive
      -
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - 
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'pnpm'
      - 
        name: Install dependencies
        run: pnpm install
      - 
        name: Lint script
        run: pnpm ${{ inputs.lint-script }}

  build:
    name: Dist build
    runs-on: ubuntu-latest

    steps:
      - 
        uses: actions/checkout@v3
        with:
          submodules: recursive
      -
        uses: pnpm/action-setup@v2
        with:
          version: 8
      - 
        uses: actions/setup-node@v3
        with:
          node-version: ${{ inputs.node-version }}
          cache: 'pnpm'
      - 
        name: Install dependencies
        run: pnpm install
      - 
        name: build dist
        run: pnpm ${{ inputs.build-script }}
      -
        name: Store build result 
        uses: actions/upload-artifact@v3
        with:
          name: dist-build
          path: |
            dist
            !dist/**/*.md
          retention-days: 1

  build-push-docker:
    name: Image Build
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    outputs:
      docker-image: ${{ steps.meta.outputs.tags }}
    needs: [lint, build]
    steps:
      - # Get project repo
        uses: actions/checkout@v4
        with:
          submodules: recursive
      - # Get gitops repo
        uses: actions/checkout@v4
        with:
          repository: ae-utbm/gitops
          # TODO: remove me
          ref: features/initial-setup
          path: gitops
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      -
        name: Login to ghcr.io
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      -
        name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ghcr.io/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix=,suffix=,format=short     
      -
        name: Fetch build artifact
        uses: actions/download-artifact@v3
        with:
          name: dist-build       
          path: dist
      -
        name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          # Using the dockerfile in the gitops template
          file: gitops/templates/docker/nodejs.Dockerfile
          build-contexts: |
            node=docker-image://node:${{ inputs.node-version }}-alpine
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  
  analyze-docker-image:
    name: Image Scan
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      packages: read
    needs: [build-push-docker]
    steps:
      -
        name: Analyze for critical and high CVEs
        id: docker-scout-cves
        uses: docker/scout-action@v1
        with:
          command: cves
          image: ${{ needs.build-push-docker.outputs.docker-image }}
          sarif-file: sarif.output.json
          summary: true
          write-comment: ${{ github.event_name == 'pull_request' }}
      -
        name: Upload SARIF result
        id: upload-sarif
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: sarif.output.json
  